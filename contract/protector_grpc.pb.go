// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtectorClient is the client API for Protector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtectorClient interface {
	AuthAttempt(ctx context.Context, in *RequestAuthAttempt, opts ...grpc.CallOption) (*ResponseAuthAttempt, error)
	CleanBucketByLogin(ctx context.Context, in *RequestCleanBucketByLogin, opts ...grpc.CallOption) (*ResponseCleanBucketByLogin, error)
	CleanBucketByIP(ctx context.Context, in *RequestCleanBucketByIP, opts ...grpc.CallOption) (*ResponseCleanBucketByIP, error)
	AddToBlackList(ctx context.Context, in *RequestAddToList, opts ...grpc.CallOption) (*ResponseAddToList, error)
	RemoveFromBlackList(ctx context.Context, in *RequestRemoveFromList, opts ...grpc.CallOption) (*ResponseRemoveFromList, error)
	AddToWhiteList(ctx context.Context, in *RequestAddToList, opts ...grpc.CallOption) (*ResponseAddToList, error)
	RemoveFromWhiteList(ctx context.Context, in *RequestRemoveFromList, opts ...grpc.CallOption) (*ResponseRemoveFromList, error)
}

type protectorClient struct {
	cc grpc.ClientConnInterface
}

func NewProtectorClient(cc grpc.ClientConnInterface) ProtectorClient {
	return &protectorClient{cc}
}

func (c *protectorClient) AuthAttempt(ctx context.Context, in *RequestAuthAttempt, opts ...grpc.CallOption) (*ResponseAuthAttempt, error) {
	out := new(ResponseAuthAttempt)
	err := c.cc.Invoke(ctx, "/contract.Protector/AuthAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectorClient) CleanBucketByLogin(ctx context.Context, in *RequestCleanBucketByLogin, opts ...grpc.CallOption) (*ResponseCleanBucketByLogin, error) {
	out := new(ResponseCleanBucketByLogin)
	err := c.cc.Invoke(ctx, "/contract.Protector/CleanBucketByLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectorClient) CleanBucketByIP(ctx context.Context, in *RequestCleanBucketByIP, opts ...grpc.CallOption) (*ResponseCleanBucketByIP, error) {
	out := new(ResponseCleanBucketByIP)
	err := c.cc.Invoke(ctx, "/contract.Protector/CleanBucketByIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectorClient) AddToBlackList(ctx context.Context, in *RequestAddToList, opts ...grpc.CallOption) (*ResponseAddToList, error) {
	out := new(ResponseAddToList)
	err := c.cc.Invoke(ctx, "/contract.Protector/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectorClient) RemoveFromBlackList(ctx context.Context, in *RequestRemoveFromList, opts ...grpc.CallOption) (*ResponseRemoveFromList, error) {
	out := new(ResponseRemoveFromList)
	err := c.cc.Invoke(ctx, "/contract.Protector/RemoveFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectorClient) AddToWhiteList(ctx context.Context, in *RequestAddToList, opts ...grpc.CallOption) (*ResponseAddToList, error) {
	out := new(ResponseAddToList)
	err := c.cc.Invoke(ctx, "/contract.Protector/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectorClient) RemoveFromWhiteList(ctx context.Context, in *RequestRemoveFromList, opts ...grpc.CallOption) (*ResponseRemoveFromList, error) {
	out := new(ResponseRemoveFromList)
	err := c.cc.Invoke(ctx, "/contract.Protector/RemoveFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtectorServer is the server API for Protector service.
// All implementations should embed UnimplementedProtectorServer
// for forward compatibility
type ProtectorServer interface {
	AuthAttempt(context.Context, *RequestAuthAttempt) (*ResponseAuthAttempt, error)
	CleanBucketByLogin(context.Context, *RequestCleanBucketByLogin) (*ResponseCleanBucketByLogin, error)
	CleanBucketByIP(context.Context, *RequestCleanBucketByIP) (*ResponseCleanBucketByIP, error)
	AddToBlackList(context.Context, *RequestAddToList) (*ResponseAddToList, error)
	RemoveFromBlackList(context.Context, *RequestRemoveFromList) (*ResponseRemoveFromList, error)
	AddToWhiteList(context.Context, *RequestAddToList) (*ResponseAddToList, error)
	RemoveFromWhiteList(context.Context, *RequestRemoveFromList) (*ResponseRemoveFromList, error)
}

// UnimplementedProtectorServer should be embedded to have forward compatible implementations.
type UnimplementedProtectorServer struct {
}

func (UnimplementedProtectorServer) AuthAttempt(context.Context, *RequestAuthAttempt) (*ResponseAuthAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthAttempt not implemented")
}
func (UnimplementedProtectorServer) CleanBucketByLogin(context.Context, *RequestCleanBucketByLogin) (*ResponseCleanBucketByLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanBucketByLogin not implemented")
}
func (UnimplementedProtectorServer) CleanBucketByIP(context.Context, *RequestCleanBucketByIP) (*ResponseCleanBucketByIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanBucketByIP not implemented")
}
func (UnimplementedProtectorServer) AddToBlackList(context.Context, *RequestAddToList) (*ResponseAddToList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedProtectorServer) RemoveFromBlackList(context.Context, *RequestRemoveFromList) (*ResponseRemoveFromList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlackList not implemented")
}
func (UnimplementedProtectorServer) AddToWhiteList(context.Context, *RequestAddToList) (*ResponseAddToList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedProtectorServer) RemoveFromWhiteList(context.Context, *RequestRemoveFromList) (*ResponseRemoveFromList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhiteList not implemented")
}

// UnsafeProtectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtectorServer will
// result in compilation errors.
type UnsafeProtectorServer interface {
	mustEmbedUnimplementedProtectorServer()
}

func RegisterProtectorServer(s grpc.ServiceRegistrar, srv ProtectorServer) {
	s.RegisterService(&Protector_ServiceDesc, srv)
}

func _Protector_AuthAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAuthAttempt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectorServer).AuthAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract.Protector/AuthAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectorServer).AuthAttempt(ctx, req.(*RequestAuthAttempt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protector_CleanBucketByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCleanBucketByLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectorServer).CleanBucketByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract.Protector/CleanBucketByLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectorServer).CleanBucketByLogin(ctx, req.(*RequestCleanBucketByLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protector_CleanBucketByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCleanBucketByIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectorServer).CleanBucketByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract.Protector/CleanBucketByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectorServer).CleanBucketByIP(ctx, req.(*RequestCleanBucketByIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protector_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddToList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectorServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract.Protector/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectorServer).AddToBlackList(ctx, req.(*RequestAddToList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protector_RemoveFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveFromList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectorServer).RemoveFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract.Protector/RemoveFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectorServer).RemoveFromBlackList(ctx, req.(*RequestRemoveFromList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protector_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddToList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectorServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract.Protector/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectorServer).AddToWhiteList(ctx, req.(*RequestAddToList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protector_RemoveFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveFromList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectorServer).RemoveFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract.Protector/RemoveFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectorServer).RemoveFromWhiteList(ctx, req.(*RequestRemoveFromList))
	}
	return interceptor(ctx, in, info, handler)
}

// Protector_ServiceDesc is the grpc.ServiceDesc for Protector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Protector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contract.Protector",
	HandlerType: (*ProtectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthAttempt",
			Handler:    _Protector_AuthAttempt_Handler,
		},
		{
			MethodName: "CleanBucketByLogin",
			Handler:    _Protector_CleanBucketByLogin_Handler,
		},
		{
			MethodName: "CleanBucketByIP",
			Handler:    _Protector_CleanBucketByIP_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _Protector_AddToBlackList_Handler,
		},
		{
			MethodName: "RemoveFromBlackList",
			Handler:    _Protector_RemoveFromBlackList_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _Protector_AddToWhiteList_Handler,
		},
		{
			MethodName: "RemoveFromWhiteList",
			Handler:    _Protector_RemoveFromWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/protector.proto",
}
